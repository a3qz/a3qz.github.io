{"version":3,"sources":["GameFlowState.tsx","Theme.tsx","NameForm.tsx","Guid.tsx","Investigate.tsx","Move.tsx","Clues.tsx","Buy.tsx","SpecificBuy.tsx","Final.tsx","Game.tsx","Waiting.tsx","LandingPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SignInState","thm","createTheme","defaultFontStyle","fontFamily","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","NameForm","props","state","handleAddUser","buttonStyles","root","width","borderColor","color","stackStyles","background","stackItemStyles","padding","handleNameChange","bind","handleRoomCodeChange","handleSubmit","AddUserHandler","roomcode","name","senderid","event","this","setState","target","value","console","log","JSON","stringify","fetch","method","headers","body","Stack","styles","StackItem","TextField","onChange","PrimaryButton","onClick","text","disabled","React","Component","Guid","replace","c","r","Math","random","toString","Investigate","interval","handleChange","interactables","player","goHome","interactable","map","index","key","DefaultButton","Move","connections","room","location","Clues","clues","clue","ClueType","Source","Target","Buy","clueTypes","type","price","cluetype","influence","history","push","withRouter","SpecificBuy","clueType","setInterval","source","sourceType","Final","getWeaponDropdown","Weapons","item","getLocationDropdown","Locations","changeWeapon","finalWeapon","changeLocation","finalLocation","stackTokens","childrenGap","person","weapon","Dropdown","options","placeholder","finalSubmit","Game","endTurn","a","getInteractables","resp","ok","x","parse","getConnections","getBigThree","WeaponResp","LocationResp","PeopleResp","People","flipSpin","setTimeout","intervalInteractable","intervalConnections","stackItemStylesText","clearInterval","Name","Location","path","CluesGiven","Waiting","switchToStarted","sent","LandingPage","newGuid","signInState","NotJoined","spinning","getPlayer","length","forceUpdate","intervalPlayer","WaitingToStart","Started","className","Spinner","size","SpinnerSize","large","style","position","top","left","App","loadTheme","initializeIcons","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cedd8a50.chunk.js","sourcesContent":["export enum SignInState{\r\n    WaitingToStart,\r\n    NotJoined,\r\n    Started\r\n}","import {createTheme, ITheme} from '@fluentui/react';\r\n\r\n\r\n\r\nvar thm: ITheme =  createTheme({\r\n  defaultFontStyle: { fontFamily: 'Georgia, Times New Roman, Times, serif;' },\r\n    palette: {\r\n      themePrimary: '#920a22',\r\n      themeLighterAlt: '#060001',\r\n      themeLighter: '#170206',\r\n      themeLight: '#2c030a',\r\n      themeTertiary: '#570615',\r\n      themeSecondary: '#80091f',\r\n      themeDarkAlt: '#9c1931',\r\n      themeDark: '#ac3249',\r\n      themeDarker: '#c25d6f',\r\n      neutralLighterAlt: '#0f230d',\r\n      neutralLighter: '#142c12',\r\n      neutralLight: '#1c3b1a',\r\n      neutralQuaternaryAlt: '#224420',\r\n      neutralQuaternary: '#274b25',\r\n      neutralTertiaryAlt: '#406a3d',\r\n      neutralTertiary: '#4d4329',\r\n      neutralSecondary: '#998651',\r\n      neutralPrimaryAlt: '#e0c477',\r\n      neutralPrimary: '#ffdf87',\r\n      neutralDark: '#ffe7a4',\r\n      black: '#ffedbc',\r\n      white: '#0a1a09',\r\n    }});\r\n\r\nexport default thm;","import React, { FormEvent } from 'react';\r\nimport { SignInState } from './GameFlowState';\r\nimport { PrimaryButton, IStackStyles, IStackItemStyles, StackItem, Stack, TextField } from '@fluentui/react';\r\nimport thm from './Theme';\r\n\r\ntype NameFormState = {\r\n  roomcode: string,\r\n  name: string,\r\n  senderid: string\r\n}\r\nexport type NameFormProps = {\r\n  AddUserHandler: Function,\r\n  senderid: string\r\n}\r\n\r\nexport class NameForm extends React.Component<NameFormProps> {\r\n  constructor(props: NameFormProps) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handleRoomCodeChange = this.handleRoomCodeChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleAddUser = props.AddUserHandler;\r\n    this.state = { roomcode: \"\", name: \"\", senderid: props.senderid }\r\n  }\r\n\r\n  state: NameFormState;\r\n  handleNameChange(event: any) {\r\n    this.setState({ name: event.target.value });\r\n  }\r\n  handleRoomCodeChange(event: any) {\r\n    this.setState({ roomcode: event.target.value });\r\n  }\r\n  handleAddUser: Function;\r\n\r\n  handleSubmit() {\r\n    console.log(JSON.stringify(this.state));\r\n    fetch('https://zebra-game-serverless.azurewebsites.net/api/AddPlayer', {\r\n      method: 'POST', // or 'PUT'\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(this.state),\r\n    })\r\n    this.handleAddUser(this.state.roomcode);\r\n  }\r\n  buttonStyles = {\r\n    root: {\r\n      width: 200,\r\n      borderColor: thm.palette.black,\r\n      color: thm.palette.black\r\n    },\r\n  };\r\n  stackStyles: IStackStyles = {\r\n    root: {\r\n      background: thm.palette.themeDark,\r\n      fontFamily: \"Georgia\",\r\n    },\r\n  };\r\n  stackItemStyles: IStackItemStyles = {\r\n    root: {\r\n      background: thm.palette.white,\r\n      color: thm.palette.black,\r\n      padding: 5,\r\n      fontFamily: \"Georgia\",\r\n    },\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Stack styles={this.stackStyles}>\r\n        <StackItem styles={this.stackItemStyles}>\r\n          <div>Name:</div>\r\n          <TextField onChange={this.handleNameChange}></TextField>\r\n        </StackItem>\r\n        <StackItem styles={this.stackItemStyles}>\r\n          <div>Room Code:</div>\r\n          <TextField onChange={this.handleRoomCodeChange}></TextField>\r\n        </StackItem>\r\n        <StackItem styles={this.stackItemStyles}>\r\n          <PrimaryButton styles={this.buttonStyles} onClick={this.handleSubmit} text=\"Join Game\" disabled={this.state.senderid === \"\" || this.state.roomcode === \"\"}/>\r\n        </StackItem>\r\n      </Stack>\r\n    );\r\n  }\r\n}","export default class Guid {\r\n    static newGuid() {\r\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        var r = Math.random() * 16 | 0,\r\n          v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n      });\r\n    }\r\n  }\r\n  ","import { type } from \"os\";\r\nimport React, { FormEvent } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    withRouter,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, StackItem, IStackStyles, ITheme, IStackItemStyles } from '@fluentui/react';\r\nimport thm from './Theme';\r\n\r\ntype InvestigateState = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    interactables: string[],\r\n    player: any,\r\n    goHome: Function\r\n}\r\nconst buttonStyles = {\r\n    root: {\r\n        width: 200,\r\n        borderColor: thm.palette.black,\r\n        color: thm.palette.black\r\n    },\r\n};\r\n\r\ntype InvestigateProps = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    interactables: string[],\r\n    goHome: Function\r\n};\r\n\r\nexport default class Investigate extends React.Component<InvestigateProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            roomcode: this.props.roomcode,\r\n            senderid: this.props.senderid,\r\n            interactables: this.props.interactables,\r\n            player: {},\r\n            goHome: this.props.goHome\r\n        }\r\n\r\n    }\r\n\r\n    state: InvestigateState;\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n        fetch('https://example.com/profile', {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(this.state),\r\n        })\r\n    }\r\n\r\n    interval: any;\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    handleInvestiagte(interactable: string) {\r\n\r\n    }\r\n\r\n    stackStyles: IStackStyles = {\r\n        root: {\r\n            background: thm.palette.themeDark,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    stackItemStyles: IStackItemStyles = {\r\n        root: {\r\n            background: thm.palette.white,\r\n            color: thm.palette.black,\r\n            padding: 5,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stack styles={this.stackStyles}>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        Select an item to investigate:\r\n                    </StackItem>\r\n                    {this.state.interactables?.map((interactable: string, index: number) => {\r\n                        return (\r\n                            <StackItem styles={this.stackItemStyles} key={index}>\r\n                                <DefaultButton styles={buttonStyles} text={interactable} onClick={\r\n                                    () => {\r\n                                        console.log('pushed ' + interactable);\r\n                                        console.log(JSON.stringify(this.state));\r\n                                        fetch('https://zebra-game-serverless.azurewebsites.net/api/Investigate', {\r\n                                            method: 'POST', // or 'PUT'\r\n                                            headers: {\r\n                                                'Content-Type': 'application/json',\r\n                                            },\r\n                                            body: JSON.stringify({\r\n                                                roomcode: this.state.roomcode,\r\n                                                senderid: this.state.senderid,\r\n                                                interactable: interactable\r\n                                            }),\r\n                                        })\r\n                                        this.state.goHome();\r\n                                    }\r\n                                } />\r\n                            </StackItem>\r\n                        )\r\n                    })}\r\n\r\n                </Stack>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { type } from \"os\";\r\nimport React, { FormEvent } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    withRouter,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, StackItem, IStackStyles, ITheme, IStackItemStyles } from '@fluentui/react';\r\nimport thm from './Theme';\r\n\r\ntype InvestigateState = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    connections: string[],\r\n    player:any,\r\n    goHome: Function\r\n}\r\nconst buttonStyles = {\r\n    root: {\r\n        width: 200,\r\n        borderColor: thm.palette.black,\r\n        color: thm.palette.black\r\n    },\r\n};\r\n\r\ntype MoveProps = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    connections: string[],\r\n    goHome: Function\r\n};\r\n\r\nexport default class Move extends React.Component<MoveProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            roomcode: this.props.roomcode,\r\n            senderid: this.props.senderid,\r\n            connections: this.props.connections,\r\n            player: {},\r\n            goHome: this.props.goHome\r\n        }\r\n\r\n    }\r\n\r\n    state: InvestigateState;\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n        fetch('https://example.com/profile', {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(this.state),\r\n        })\r\n    }\r\n\r\n    interval: any;\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    stackStyles: IStackStyles = {\r\n        root: {\r\n            background: thm.palette.themeDark,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    stackItemStyles: IStackItemStyles = {\r\n        root: {\r\n            background: thm.palette.white,\r\n            color: thm.palette.black,\r\n            padding: 5,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stack styles={this.stackStyles}>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        Select an adjacent room to travel to:\r\n                    </StackItem>\r\n                    {this.state.connections?.map((room: string, index: number) => {\r\n                        return (\r\n                            <StackItem styles={this.stackItemStyles} key={index}>\r\n                                <DefaultButton styles={buttonStyles} text={room} onClick={() => {\r\n                                        console.log('pushed ' + room);\r\n                                        console.log(JSON.stringify(this.state));\r\n                                        fetch('https://zebra-game-serverless.azurewebsites.net/api/MoveLocation', {\r\n                                            method: 'POST', // or 'PUT'\r\n                                            headers: {\r\n                                                'Content-Type': 'application/json',\r\n                                            },\r\n                                            body: JSON.stringify({\r\n                                                roomcode: this.state.roomcode,\r\n                                                senderid: this.state.senderid,\r\n                                                location: room\r\n                                            }),\r\n                                        })\r\n                                        this.state.goHome();\r\n                                    }} />\r\n                            </StackItem>\r\n                        )\r\n                    })}\r\n                </Stack>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { type } from \"os\";\r\nimport React, { FormEvent } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    withRouter,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, StackItem, IStackStyles, ITheme, IStackItemStyles, Icon } from '@fluentui/react';\r\nimport thm from './Theme';\r\n\r\ntype InvestigateState = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    clues: any[],\r\n    player:any,\r\n    goHome: Function\r\n}\r\nconst buttonStyles = {\r\n    root: {\r\n        width: 200,\r\n        borderColor: thm.palette.black,\r\n        color: thm.palette.black\r\n    },\r\n};\r\n\r\ntype InvestigateProps = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    clues: any[],\r\n    goHome: Function\r\n};\r\n\r\nexport default class Clues extends React.Component<InvestigateProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            roomcode: this.props.roomcode,\r\n            senderid: this.props.senderid,\r\n            clues: this.props.clues,\r\n            player: this.props.player,\r\n            goHome: this.props.goHome\r\n        }\r\n\r\n    }\r\n\r\n    state: InvestigateState;\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n        fetch('https://example.com/profile', {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(this.state),\r\n        })\r\n    }\r\n\r\n    interval: any;\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    stackStyles: IStackStyles = {\r\n        root: {\r\n            background: thm.palette.themeDark,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    stackItemStyles: IStackItemStyles = {\r\n        root: {\r\n            background: thm.palette.white,\r\n            color: thm.palette.black,\r\n            padding: 5,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stack styles={this.stackStyles}>\r\n                    <StackItem styles={this.stackItemStyles}>\r\n                        Clues: \r\n                    </StackItem>\r\n                    {this.state.clues?.map((clue: any, index: number) => {\r\n                        return (\r\n                            <StackItem styles={this.stackItemStyles} key={index}>\r\n                                {clue?.ClueType == 0? <div>`${clue?.Source}, ${clue?.Target}: X` </div>:<div>`${clue?.Source}, ${clue?.Target}: ✓`</div>}\r\n                            </StackItem>\r\n                        )\r\n                    })}\r\n                </Stack>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { type } from \"os\";\r\nimport React, { FormEvent } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    withRouter,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, StackItem, IStackStyles, ITheme, IStackItemStyles } from '@fluentui/react';\r\nimport thm from './Theme';\r\n\r\ntype InvestigateState = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    goHome: Function\r\n}\r\nconst buttonStyles = {\r\n    root: {\r\n        width: 200,\r\n        borderColor: thm.palette.black,\r\n        color: thm.palette.black\r\n    },\r\n};\r\n\r\ninterface MoveProps extends RouteComponentProps {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    goHome: Function\r\n};\r\n\r\nclass Buy extends React.Component<MoveProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            roomcode: this.props.roomcode,\r\n            senderid: this.props.senderid,\r\n            player: this.props.player,\r\n            goHome: this.props.goHome\r\n        }\r\n\r\n    }\r\n\r\n    state: InvestigateState;\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n        fetch('https://example.com/profile', {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(this.state),\r\n        })\r\n    }\r\n\r\n    interval: any;\r\n    clueTypes = [\r\n        {\r\n            type: \"Negative\",\r\n            price: 3,\r\n        },\r\n        {\r\n            type: \"Positive\",\r\n            price: 12\r\n        },\r\n        {\r\n            type: \"Specific Negative\",\r\n            price: 6,\r\n        },\r\n        {\r\n            type: \"Specific Positive\",\r\n            price: 15\r\n        },\r\n    ];\r\n\r\n    stackStyles: IStackStyles = {\r\n        root: {\r\n            background: thm.palette.themeDark,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    stackItemStyles: IStackItemStyles = {\r\n        root: {\r\n            background: thm.palette.white,\r\n            color: thm.palette.black,\r\n            padding: 5,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stack styles={this.stackStyles}>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        Select a type of clue to buy:\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles}>\r\n                        <DefaultButton styles={buttonStyles} text={`${this.clueTypes[0].type}`} onClick={\r\n                            () => {\r\n                                console.log('pushed ' + this.clueTypes[0].type);\r\n                                console.log(JSON.stringify(this.state));\r\n                                fetch('https://zebra-game-serverless.azurewebsites.net/api/BuyClue', {\r\n                                    method: 'POST', // or 'PUT'\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        roomcode: this.state.roomcode,\r\n                                        senderid: this.state.senderid,\r\n                                        cluetype: this.clueTypes[0].type\r\n                                    }),\r\n                                })\r\n                                this.state.goHome();\r\n                            }\r\n                        } disabled={this.state.player.influence < this.clueTypes[0].price} />\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles}>\r\n                        <DefaultButton styles={buttonStyles} text={`${this.clueTypes[1].type}`} onClick={\r\n                            () => {\r\n                                console.log('pushed ' + this.clueTypes[1].type);\r\n                                console.log(JSON.stringify(this.state));\r\n                                fetch('https://zebra-game-serverless.azurewebsites.net/api/BuyClue', {\r\n                                    method: 'POST', // or 'PUT'\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        roomcode: this.state.roomcode,\r\n                                        senderid: this.state.senderid,\r\n                                        cluetype: this.clueTypes[1].type\r\n                                    }),\r\n                                })\r\n                                this.state.goHome();\r\n                            }\r\n                        } disabled={this.state.player.influence < this.clueTypes[1].price} />\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles}>\r\n                        <DefaultButton styles={buttonStyles} text={`${this.clueTypes[2].type}`} onClick={() =>\r\n                            this.props.history.push(\"/specificnegative\")\r\n                        } disabled={this.state.player.influence < this.clueTypes[2].price} />\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles}>\r\n                        <DefaultButton styles={buttonStyles} text={`${this.clueTypes[3].type}`} onClick={() =>\r\n                            this.props.history.push(\"/specificpositive\")\r\n                        } disabled={this.state.player.influence < this.clueTypes[3].price} />\r\n                    </StackItem>\r\n                </Stack>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(Buy);","import { type } from \"os\";\r\nimport React, { FormEvent } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    withRouter,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, StackItem, IStackStyles, ITheme, IStackItemStyles } from '@fluentui/react';\r\nimport thm from './Theme';\r\n\r\ntype InvestigateState = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    clueType: string,\r\n    goHome: Function\r\n}\r\nconst buttonStyles = {\r\n    root: {\r\n        width: 200,\r\n        borderColor: thm.palette.black,\r\n        color: thm.palette.black\r\n    },\r\n};\r\n\r\ninterface MoveProps {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    clueType: string,\r\n    goHome: Function\r\n};\r\n\r\nexport default class SpecificBuy extends React.Component<MoveProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            roomcode: this.props.roomcode,\r\n            senderid: this.props.senderid,\r\n            player: this.props.player,\r\n            clueType: this.props.clueType,\r\n            goHome: this.props.goHome\r\n        }\r\n\r\n    }\r\n\r\n    state: InvestigateState;\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n        fetch('https://example.com/profile', {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(this.state),\r\n        })\r\n    }\r\n\r\n    interval: any;\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => console.log(this.state.player), 5000);\r\n    }\r\n\r\n    stackStyles: IStackStyles = {\r\n        root: {\r\n            background: thm.palette.themeDark,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    stackItemStyles: IStackItemStyles = {\r\n        root: {\r\n            background: thm.palette.white,\r\n            color: thm.palette.black,\r\n            padding: 5,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stack styles={this.stackStyles}>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        Select a type of clue to buy:\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        <DefaultButton styles={buttonStyles} text={`Weapon`} onClick={\r\n                            () => {\r\n                                console.log('pushed ' + \"Weapon\");\r\n                                console.log(JSON.stringify(this.state));\r\n                                fetch('https://zebra-game-serverless.azurewebsites.net/api/BuyClue', {\r\n                                    method: 'POST', // or 'PUT'\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        roomcode: this.state.roomcode,\r\n                                        senderid: this.state.senderid,\r\n                                        cluetype: this.state.clueType,\r\n                                        source: \"na\",\r\n                                        sourceType: `Weapon`\r\n                                    }),\r\n                                })\r\n                                this.state.goHome();\r\n                            }\r\n                        } />\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        <DefaultButton styles={buttonStyles} text={`Person`} onClick={\r\n                            () => {\r\n                                console.log('pushed ' + \"Weapon\");\r\n                                console.log(JSON.stringify(this.state));\r\n                                fetch('https://zebra-game-serverless.azurewebsites.net/api/BuyClue', {\r\n                                    method: 'POST', // or 'PUT'\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        roomcode: this.state.roomcode,\r\n                                        senderid: this.state.senderid,\r\n                                        cluetype: this.state.clueType,\r\n                                        source: \"na\",\r\n                                        sourceType: `Person`\r\n                                    }),\r\n                                })\r\n                                this.state.goHome();\r\n                            }\r\n                        } />\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        <DefaultButton styles={buttonStyles} text={`Location`} onClick={\r\n                            () => {\r\n                                console.log('pushed ' + \"Location\");\r\n                                console.log(JSON.stringify(this.state));\r\n                                fetch('https://zebra-game-serverless.azurewebsites.net/api/BuyClue', {\r\n                                    method: 'POST', // or 'PUT'\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        roomcode: this.state.roomcode,\r\n                                        senderid: this.state.senderid,\r\n                                        cluetype: this.state.clueType,\r\n                                        source: \"na\",\r\n                                        sourceType: `Location`\r\n                                    }),\r\n                                })\r\n                                this.state.goHome();\r\n                            }\r\n                        } />\r\n                    </StackItem>\r\n                </Stack>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    withRouter,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, StackItem, IStackStyles, ITheme, IStackItemStyles, Dropdown, DropdownMenuItemType, IDropdownStyles, IDropdownOption} from '@fluentui/react';\r\nimport thm from './Theme';\r\n\r\n\r\n\r\ntype FinalState = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    Weapons: string[],\r\n    Locations: string[],\r\n    finalWeapon: string,\r\n    finalLocation: string,\r\n    goHome: Function\r\n}\r\nconst buttonStyles = {\r\n    root: {\r\n        width: 200,\r\n        borderColor: thm.palette.black,\r\n        color: thm.palette.black\r\n    },\r\n};\r\n\r\ntype InvestigateProps = {\r\n    roomcode: string,\r\n    senderid: string,\r\n    player: any,\r\n    Weapons: string[],\r\n    Locations: string[],\r\n    goHome: Function\r\n};\r\n\r\nexport default class Final extends React.Component<InvestigateProps> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            roomcode: this.props.roomcode,\r\n            senderid: this.props.senderid,\r\n            player: this.props.player,\r\n            Weapons: this.props.Weapons,\r\n            Locations: this.props.Locations,\r\n            finalLocation: \"\",\r\n            finalWeapon: \"\",\r\n            goHome: this.props.goHome\r\n        }\r\n\r\n    }\r\n\r\n    state: FinalState;\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event: any) {\r\n        fetch('https://example.com/profile', {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(this.state),\r\n        })\r\n    }\r\n\r\n    interval: any;\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    handleInvestiagte(interactable: string) {\r\n\r\n    }\r\n\r\n    stackStyles: IStackStyles = {\r\n        root: {\r\n            background: thm.palette.themeDark,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n    stackItemStyles: IStackItemStyles = {\r\n        root: {\r\n            background: thm.palette.white,\r\n            color: thm.palette.black,\r\n            padding: 5,\r\n            fontFamily: \"Georgia\",\r\n        },\r\n    };\r\n\r\n    getWeaponDropdown = (): IDropdownOption[] => {\r\n        var lists = this.state.Weapons.map((item) => {\r\n            return { key: item, text: item }\r\n        });\r\n        return lists;\r\n    }\r\n\r\n    getLocationDropdown = (): IDropdownOption[] => {\r\n        var lists = this.state.Locations.map((item) => {\r\n            return { key: item, text: item }\r\n        });\r\n        return lists;\r\n    }\r\n\r\n    changeWeapon = (event: any) => {\r\n        this.setState({\r\n            finalWeapon: event.target.value\r\n        })\r\n    }\r\n\r\n    changeLocation = (event: any) => {\r\n        this.setState({\r\n            finalLocation: event.target.value\r\n        })\r\n    }\r\n\r\n    finalSubmit() {\r\n        console.log(JSON.stringify(this.state));\r\n        fetch('https://zebra-game-serverless.azurewebsites.net/api/FinalGuess', {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                roomcode: this.state.roomcode,\r\n                senderid: this.state.senderid,\r\n                person: this.state.player.target,\r\n                weapon: this.state.finalWeapon,\r\n                location: this.state.finalLocation\r\n            }),\r\n        })\r\n        this.state.goHome();\r\n    }\r\n\r\n    buttonStyles = {\r\n        root: {\r\n          width: 200,\r\n          borderColor: thm.palette.black,\r\n          color: thm.palette.black\r\n        },\r\n      };\r\n\r\n      stackTokens: IStackTokens = { childrenGap: 20 };\r\n\r\n    render() {\r\n        return (\r\n              <div>\r\n                <Stack styles={this.stackStyles} >\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        <h2>Select the weapon and location where {this.state.player.target} was killed:</h2>\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        <Dropdown options={this.getWeaponDropdown()} placeholder=\"Weapon\" onChange={this.changeWeapon} />\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        <Dropdown options={this.getLocationDropdown()} placeholder=\"Location\" onChange={this.changeLocation} />\r\n                    </StackItem>\r\n                    <StackItem styles={this.stackItemStyles} >\r\n                        <PrimaryButton styles={this.buttonStyles} text=\"Submit\" onClick={this.finalSubmit} />\r\n                    </StackItem>\r\n                </Stack>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { type } from \"os\";\r\nimport React, { FormEvent } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  withRouter,\r\n  RouteComponentProps\r\n} from \"react-router-dom\";\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, StackItem, IStackStyles, ITheme, IStackItemStyles } from '@fluentui/react';\r\nimport thm from './Theme';\r\nimport Target from './Target';\r\nimport Investigate from './Investigate'\r\nimport Move from \"./Move\";\r\nimport Clues from \"./Clues\";\r\nimport Buy from \"./Buy\";\r\nimport SpecificBuy from './SpecificBuy';\r\nimport Final from './Final'\r\nimport { runInThisContext } from \"vm\";\r\n\r\ntype GameState = {\r\n  roomcode: string,\r\n  senderid: string,\r\n  player: any,\r\n  interactables: string[],\r\n  connections: string[],\r\n  Weapons: string[],\r\n  Locations: string[],\r\n  People: string[]\r\n}\r\n\r\nconst buttonStyles = {\r\n  root: {\r\n    width: 200,\r\n    borderColor: thm.palette.black,\r\n    color: thm.palette.black\r\n  },\r\n};\r\n\r\ninterface GameProps extends RouteComponentProps {\r\n  roomcode: string,\r\n  senderid: string,\r\n  flipSpin: Function,\r\n  player: any\r\n};\r\n\r\nclass Game extends React.Component<GameProps, GameState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    \r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.flipSpin = this.props.flipSpin;\r\n\r\n    this.state = {\r\n      roomcode: this.props.roomcode,\r\n      senderid: this.props.senderid,\r\n      player: this.props.player,\r\n      interactables: [],\r\n      connections: [],\r\n      Weapons: [],\r\n      People: [],\r\n      Locations: []\r\n      };\r\n  }\r\n\r\n  handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n    fetch('https://example.com/profile', {\r\n      method: 'POST', // or 'PUT'\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(this.state),\r\n    })\r\n  }\r\n\r\n  endTurn = async () => {\r\n    console.log(\"turn ended\");\r\n    let x = await fetch('https://zebra-game-serverless.azurewebsites.net/api/EndTurn', {\r\n      method: 'POST', // or 'PUT'\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        senderid: this.state.senderid,\r\n        roomcode: this.state.roomcode\r\n      }),\r\n    })\r\n  }\r\n\r\n\r\n\r\n  getInteractables = async () => {\r\n    var resp = await fetch(`https://zebra-game-serverless.azurewebsites.net/api/GetInteractables?roomcode=${this.state.roomcode}&senderid=${this.state.senderid}`, {\r\n      method: 'GET', // or 'PUT'\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    if (resp.ok) {\r\n      var interactables = await resp.text();\r\n      console.log(interactables);\r\n      var x = JSON.parse(`${interactables}`);\r\n      this.setState({\r\n        interactables: x\r\n      })\r\n    }\r\n  }\r\n  getConnections = async () => {\r\n    var resp = await fetch(`https://zebra-game-serverless.azurewebsites.net/api/GetConnections?roomcode=${this.state.roomcode}&senderid=${this.state.senderid}`, {\r\n      method: 'GET', // or 'PUT'\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    if (resp.ok) {\r\n      var connections = await resp.text();\r\n      console.log(connections);\r\n      var x = JSON.parse(`${connections}`);\r\n      this.setState({\r\n        connections: x\r\n      })\r\n    }\r\n  }\r\n\r\n  getBigThree = async () => {\r\n    do {\r\n      var WeaponResp = await fetch(`https://zebra-game-serverless.azurewebsites.net/api/GetWeapons?roomcode=${this.state.roomcode}&senderid=${this.state.senderid}`, {\r\n        method: 'GET', // or 'PUT'\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    } while (!WeaponResp.ok)\r\n    let Weapons = await WeaponResp.text();\r\n    console.log(Weapons);\r\n    var x = JSON.parse(`${Weapons}`);\r\n    this.setState({\r\n      Weapons: x\r\n    })\r\n\r\n    do {\r\n      var LocationResp = await fetch(`https://zebra-game-serverless.azurewebsites.net/api/GetLocations?roomcode=${this.state.roomcode}&senderid=${this.state.senderid}`, {\r\n        method: 'GET', // or 'PUT'\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    } while (!LocationResp.ok)\r\n    let Locations = await LocationResp.text();\r\n    console.log(Locations);\r\n    var x = JSON.parse(`${Locations}`);\r\n    this.setState({\r\n      Locations: x\r\n    })\r\n\r\n    do {\r\n      var PeopleResp = await fetch(`https://zebra-game-serverless.azurewebsites.net/api/GetPeople?roomcode=${this.state.roomcode}&senderid=${this.state.senderid}`, {\r\n        method: 'GET', // or 'PUT'\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    } while (!PeopleResp.ok)\r\n    let People = await PeopleResp.text();\r\n    console.log(People);\r\n    var x = JSON.parse(`${People}`);\r\n    this.setState({\r\n      People: x\r\n    })\r\n  }\r\n\r\n\r\n  flipSpin: Function;\r\n  goHome = () => {\r\n    this.flipSpin();\r\n    this.props.history.push('/');\r\n    setTimeout(this.flipSpin, 2000);\r\n  }\r\n\r\n  // stuff for figuring out if game started. (would like to move to socket or whatever but meh)\r\n  intervalInteractable: any;\r\n  intervalConnections: any;\r\n  componentDidMount() {\r\n    this.getInteractables();\r\n    this.getConnections();\r\n    this.getBigThree();\r\n    this.intervalInteractable = setInterval(\r\n      this.getInteractables, 5000);\r\n\r\n    this.intervalConnections = setInterval(\r\n      this.getConnections, 5000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalInteractable);\r\n    this.intervalInteractable = null;\r\n    clearInterval(this.intervalConnections);\r\n    this.intervalConnections = null;\r\n  }\r\n\r\n    stackStyles: IStackStyles = {\r\n    root: {\r\n      background: thm.palette.themeDark,\r\n      fontFamily: \"Georgia\",\r\n    },\r\n  };\r\n  stackItemStyles: IStackItemStyles = {\r\n    root: {\r\n      background: thm.palette.white,\r\n      color: thm.palette.black,\r\n      padding: 5,\r\n      fontFamily: \"Georgia\",\r\n    },\r\n  };\r\n  stackItemStylesText: IStackItemStyles = {\r\n    root: {\r\n      background: thm.palette.white,\r\n      color: thm.palette.black,\r\n      fontFamily: \"Georgia\",\r\n    },\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Stack>\r\n          <StackItem>\r\n            Name: {this.state.player?.Name}\r\n          </StackItem>\r\n          <StackItem>\r\n            Roomcode: {this.state.roomcode}\r\n          </StackItem>\r\n          <StackItem>\r\n            Location: {this.state.player?.Location}\r\n          </StackItem>\r\n          <StackItem>\r\n            Influence: {this.state.player?.influence}\r\n          </StackItem>\r\n        </Stack>\r\n        <Switch>\r\n          <Route path=\"/clues\">\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <Clues roomcode={this.state.roomcode} senderid={this.state.senderid} clues={this.state.player?.CluesGiven} player={this.state.player} goHome={this.goHome}></Clues>\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"Go Back\" onClick={() => this.props.history.push('/')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n          <Route path=\"/target\">\r\n            <StackItem styles={this.stackItemStylesText}>\r\n              <h2>Your Target is:</h2>\r\n            </StackItem>\r\n            <StackItem styles={this.stackItemStylesText}>\r\n              <h2>{this.state.player.target}</h2>\r\n            </StackItem>\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"Go Back\" onClick={() => this.props.history.push('/')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n          <Route path=\"/move\">\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <Move roomcode={this.state.roomcode} senderid={this.state.senderid} player={this.state.player} connections={this.state.connections} goHome={this.goHome} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"Go Back\" onClick={() => this.props.history.push('/')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n          <Route path=\"/investigate\">\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <Investigate roomcode={this.state.roomcode} senderid={this.state.senderid} player={this.state.player} interactables={this.state.interactables} goHome={this.goHome} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"Go Back\" onClick={() => this.props.history.push('/')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n          <Route path=\"/specificnegative\">\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <SpecificBuy roomcode={this.state.roomcode} senderid={this.state.senderid} player={this.state.player} clueType=\"SpecificNegative\" goHome={this.goHome} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"Go Back\" onClick={() => this.props.history.push('/investigate')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n          <Route path=\"/specificpositive\">\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <SpecificBuy roomcode={this.state.roomcode} senderid={this.state.senderid} player={this.state.player} clueType=\"SpecificPositive\" goHome={this.goHome} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"Go Back\" onClick={() => this.props.history.push('/investigate')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n          <Route path=\"/buy\">\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <Buy roomcode={this.state.roomcode} senderid={this.state.senderid} player={this.state.player} goHome={this.goHome}></Buy>\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"Go Back\" onClick={() => this.props.history.push('/')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n          <Route path=\"/final\">\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <Final roomcode={this.state.roomcode} senderid={this.state.senderid} player={this.state.player} Weapons={this.state.Weapons} Locations={this.state.Locations} goHome={this.goHome}></Final>\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"Go Back\" onClick={() => this.props.history.push('/')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Stack styles={this.stackStyles}>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <DefaultButton styles={buttonStyles} text=\"Check Clues\" onClick={() => this.props.history.push('/clues')} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <DefaultButton styles={buttonStyles} text=\"Check Target\" onClick={() => this.props.history.push('/target')} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <DefaultButton styles={buttonStyles} text=\"Move Rooms\" onClick={() => this.props.history.push('/move')} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <DefaultButton styles={buttonStyles} text=\"Investigate\" onClick={() => this.props.history.push('/investigate')} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <DefaultButton styles={buttonStyles} text=\"Buy a Clue\" onClick={() => this.props.history.push('/buy')} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <PrimaryButton styles={buttonStyles} text=\"End Turn\" onClick={this.endTurn} />\r\n              </StackItem>\r\n              <StackItem styles={this.stackItemStyles}>\r\n                <DefaultButton styles={buttonStyles} text=\"Final Guess\" onClick={() => this.props.history.push('/final')} />\r\n              </StackItem>\r\n            </Stack>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(Game);","import React, { FormEvent } from 'react';\r\nimport { SignInState } from './GameFlowState';\r\nimport { PrimaryButton } from '@fluentui/react';\r\nimport thm from './Theme';\r\n\r\ntype WaitingState = {\r\n  roomcode: string,\r\n  senderid: string,\r\n  sent: boolean\r\n}\r\nexport type WaitingProps = {\r\n  senderid: string,\r\n  roomcode: string,\r\n  switchToStarted: Function;\r\n}\r\n\r\nexport default class Waiting extends React.Component<WaitingProps> {\r\n  constructor(props: WaitingProps) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = { roomcode: props.roomcode, senderid: props.senderid, sent: false }\r\n    this.switchToStarted = props.switchToStarted;\r\n  }\r\n\r\n  // stuff for figuring out if game started. (would like to move to socket or whatever but meh)\r\n  interval: any;\r\n  componentDidMount() {\r\n    this.interval = setInterval(\r\n      async () => {\r\n        var resp = await fetch(`https://zebra-game-serverless.azurewebsites.net/api/IsGameStarted?roomcode=${this.state.roomcode}`, {\r\n          method: 'GET', // or 'PUT'\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n        var turn = await resp.text();\r\n        if (turn == \"MainTurn\") {\r\n          this.switchToStarted();\r\n        }\r\n      }, 5000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n    this.interval = null;\r\n  }\r\n\r\n\r\n  state: WaitingState;\r\n  switchToStarted: Function;\r\n  handleSubmit() {\r\n    console.log(JSON.stringify(this.state));\r\n    fetch('https://zebra-game-serverless.azurewebsites.net/api/StartGame', {\r\n      method: 'POST', // or 'PUT'\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ senderid: this.state.senderid, roomcode: this.state.roomcode }),\r\n    })\r\n    this.setState({\r\n      sent: true\r\n    })\r\n  }\r\n  buttonStyles = {\r\n    root: {\r\n      width: 200,\r\n      borderColor: thm.palette.black,\r\n      color: thm.palette.black\r\n    },\r\n  };\r\n  render() {\r\n    return (\r\n      <PrimaryButton styles={this.buttonStyles} text=\"Everyone ready to begin?\" onClick={this.handleSubmit} disabled={this.state.sent} />\r\n    );\r\n  }\r\n}","import { NameForm, NameFormProps } from './NameForm';\r\nimport { SignInState } from './GameFlowState';\r\nimport React from 'react';\r\nimport Guid from './Guid';\r\nimport Game from './Game';\r\nimport Waiting from './Waiting';\r\nimport { Spinner, SpinnerSize } from '@fluentui/react';\r\n\r\ntype LandingPageState = {\r\n    roomcode: string,\r\n    name: string,\r\n    senderid: string,\r\n    signInState: SignInState,\r\n    spinning: boolean,\r\n    player: any\r\n}\r\n\r\nexport class LandingPage extends React.Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleAddUser = this.handleAddUser.bind(this);\r\n        this.switchToStarted = this.switchToStarted.bind(this);\r\n    }\r\n\r\n    handleAddUser(roomcode: string) {\r\n        this.setState({\r\n            signInState: SignInState.WaitingToStart,\r\n            roomcode: roomcode\r\n        })\r\n    }\r\n\r\n    switchToStarted() {\r\n        this.setState({\r\n            signInState: SignInState.Started\r\n        })\r\n    }\r\n    state: LandingPageState = {\r\n        roomcode: \"\",\r\n        name: \"\",\r\n        senderid: Guid.newGuid().toString(),\r\n        signInState: SignInState.NotJoined, // CHANGE BACK\r\n        spinning: false,\r\n        player: {}\r\n    };\r\n\r\n    getPlayer = async () => {\r\n        if(this.state.roomcode.length == 0){\r\n            return;\r\n        }\r\n        var resp = await fetch(`https://zebra-game-serverless.azurewebsites.net/api/GetPlayer?roomcode=${this.state.roomcode}&senderid=${this.state.senderid}`, {\r\n            method: 'GET', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if (resp.ok) {\r\n            var player = await resp.text();\r\n            console.log(player);\r\n            console.log(\"gotplayerfromloop\");\r\n            var x = JSON.parse(`${player}`);\r\n\r\n            this.setState({\r\n                player: x\r\n            })\r\n            this.forceUpdate();\r\n        }\r\n\r\n    }\r\n\r\n    intervalPlayer: any;\r\n    componentDidMount(){\r\n        this.getPlayer();\r\n        this.intervalPlayer = setInterval(\r\n          this.getPlayer, 5000);\r\n          \r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this.intervalPlayer);\r\n        this.intervalPlayer = null;\r\n    }\r\n\r\n    flipSpin = () => {\r\n        this.setState({\r\n            spinning: !this.state.spinning\r\n        });\r\n        this.getPlayer();\r\n        console.log(\"spin: \" + this.state.spinning);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"LandingPage\">\r\n            {this.state.signInState === SignInState.Started ?\r\n                (this.state.spinning ?\r\n                    <Spinner size={SpinnerSize.large} style={{\r\n                        position: 'absolute',\r\n                        top: '50%',\r\n                        left: '45%'\r\n                    }} /> :\r\n                    <Game roomcode={this.state.roomcode} senderid={this.state.senderid} flipSpin={this.flipSpin} player={this.state.player}></Game>)\r\n                :\r\n                (\r\n                    this.state.signInState ===\r\n                        SignInState.WaitingToStart ?\r\n                        <Waiting senderid={this.state.senderid} roomcode={this.state.roomcode} switchToStarted={this.switchToStarted}></Waiting> :\r\n                        <NameForm AddUserHandler={this.handleAddUser} senderid={this.state.senderid}></NameForm>\r\n                )}\r\n        </div>\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { LandingPage } from \"./LandingPage\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, ThemeGenerator, createTheme, loadTheme, Customizer, StackItem, IStackStyles, IStackItemStyles, Layer, ILayerStyles } from '@fluentui/react';\nimport thm from './Theme';\nimport { initializeIcons } from '@uifabric/icons';\n\nconst stackStyles: ILayerStyles = {\n  root: {\n    background: thm.palette.white,\n  },\n};\nconst stackItemStyles: IStackItemStyles = {\n  root: {\n    background: thm.palette.themePrimary,\n    color: thm.palette.white,\n    padding: 5,\n  },\n};\nfunction App() {\n  loadTheme(thm);\n  initializeIcons();\n  return (\n    <div className=\"App\" style={{ background: thm.palette.white }}>\n      <header className=\"App-header\" style={{ color: thm.palette.black }}>\n        <h1>The Murders at Withering Hill</h1>\n        <Router>\n          <LandingPage />\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}